"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThrow200ExceptionsPlugin = exports.throw200ExceptionsMiddlewareOptions = exports.throw200ExceptionsMiddleware = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
/**
 * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,
 * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.
 * @internal
 */
exports.throw200ExceptionsMiddleware = (config) => (next) => async (args) => {
    const result = await next(args);
    const { response } = result;
    if (!protocol_http_1.HttpResponse.isInstance(response))
        return result;
    const { statusCode, body } = response;
    if (statusCode < 200 && statusCode >= 300)
        return result;
    // Throw 2XX response that's either an error or has empty body.
    const bodyBytes = await collectBody(body, config);
    const bodyString = await collectBodyString(bodyBytes, config);
    if (bodyBytes.length === 0) {
        const err = new Error("S3 aborted request");
        err.name = "InternalError";
        throw err;
    }
    if (bodyString && bodyString.match("<Error>")) {
        // Set the error code to 4XX so that error deserializer can parse them
        response.statusCode = 400;
    }
    // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.
    // So that the deserializer can consume the body as normal.
    response.body = bodyBytes;
    return result;
};
// Collect low-level response body stream to Uint8Array.
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
/**
 * @internal
 */
exports.throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: ["THROW_200_EXCEPTIONS", "S3"],
    name: "throw200ExceptionsMiddleware",
};
/**
 *
 * @internal
 */
exports.getThrow200ExceptionsPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(exports.throw200ExceptionsMiddleware(config), exports.throw200ExceptionsMiddlewareOptions);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyb3ctMjAwLWV4Y2VwdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGhyb3ctMjAwLWV4Y2VwdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQXNEO0FBUXREOzs7O0dBSUc7QUFDVSxRQUFBLDRCQUE0QixHQUFHLENBQUMsTUFBMEIsRUFBbUMsRUFBRSxDQUFDLENBQzNHLElBQUksRUFDSixFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO0lBQ2xCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFDNUIsSUFBSSxDQUFDLDRCQUFZLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUFFLE9BQU8sTUFBTSxDQUFDO0lBQ3RELE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDO0lBQ3RDLElBQUksVUFBVSxHQUFHLEdBQUcsSUFBSSxVQUFVLElBQUksR0FBRztRQUFFLE9BQU8sTUFBTSxDQUFDO0lBRXpELCtEQUErRDtJQUMvRCxNQUFNLFNBQVMsR0FBRyxNQUFNLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUQsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzVDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDO1FBQzNCLE1BQU0sR0FBRyxDQUFDO0tBQ1g7SUFDRCxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQzdDLHNFQUFzRTtRQUN0RSxRQUFRLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztLQUMzQjtJQUVELHlHQUF5RztJQUN6RywyREFBMkQ7SUFDM0QsUUFBUSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7SUFDMUIsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBRUYsd0RBQXdEO0FBQ3hELE1BQU0sV0FBVyxHQUFHLENBQUMsYUFBa0IsSUFBSSxVQUFVLEVBQUUsRUFBRSxPQUEyQixFQUF1QixFQUFFO0lBQzNHLElBQUksVUFBVSxZQUFZLFVBQVUsRUFBRTtRQUNwQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDcEM7SUFDRCxPQUFPLE9BQU8sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDbEYsQ0FBQyxDQUFDO0FBRUYsaURBQWlEO0FBQ2pELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxVQUFlLEVBQUUsT0FBMkIsRUFBbUIsRUFBRSxDQUMxRixXQUFXLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBRTdFOztHQUVHO0FBQ1UsUUFBQSxtQ0FBbUMsR0FBOEI7SUFDNUUsUUFBUSxFQUFFLE9BQU87SUFDakIsWUFBWSxFQUFFLHdCQUF3QjtJQUN0QyxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUM7SUFDcEMsSUFBSSxFQUFFLDhCQUE4QjtDQUNyQyxDQUFDO0FBRUY7OztHQUdHO0FBQ1UsUUFBQSwyQkFBMkIsR0FBRyxDQUFDLE1BQTBCLEVBQXVCLEVBQUUsQ0FBQyxDQUFDO0lBQy9GLFlBQVksRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFO1FBQzVCLFdBQVcsQ0FBQyxhQUFhLENBQUMsb0NBQTRCLENBQUMsTUFBTSxDQUFDLEVBQUUsMkNBQW1DLENBQUMsQ0FBQztJQUN2RyxDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IERlc2VyaWFsaXplTWlkZGxld2FyZSwgRW5jb2RlciwgUGx1Z2dhYmxlLCBSZWxhdGl2ZU1pZGRsZXdhcmVPcHRpb25zLCBTdHJlYW1Db2xsZWN0b3IgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxudHlwZSBQcmV2aW91c2x5UmVzb2x2ZWQgPSB7XG4gIHN0cmVhbUNvbGxlY3RvcjogU3RyZWFtQ29sbGVjdG9yO1xuICB1dGY4RW5jb2RlcjogRW5jb2Rlcjtcbn07XG5cbi8qKlxuICogSW4gY2FzZSBvZiBhbiBpbnRlcm5hbCBlcnJvci90ZXJtaW5hdGVkIGNvbm5lY3Rpb24sIFMzIG9wZXJhdGlvbnMgbWF5IHJldHVybiAyMDAgZXJyb3JzLiBDb3B5T2JqZWN0LCBVcGxvYWRQYXJ0Q29weSxcbiAqIENvbXBsZXRlTXVsdGlwYXJ0VXBsb2FkIG1heSByZXR1cm4gZW1wdHkgcGF5bG9hZCBvciBwYXlsb2FkIHdpdGggb25seSB4bWwgUHJlYW1ibGUuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHRocm93MjAwRXhjZXB0aW9uc01pZGRsZXdhcmUgPSAoY29uZmlnOiBQcmV2aW91c2x5UmVzb2x2ZWQpOiBEZXNlcmlhbGl6ZU1pZGRsZXdhcmU8YW55LCBhbnk+ID0+IChcbiAgbmV4dFxuKSA9PiBhc3luYyAoYXJncykgPT4ge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXh0KGFyZ3MpO1xuICBjb25zdCB7IHJlc3BvbnNlIH0gPSByZXN1bHQ7XG4gIGlmICghSHR0cFJlc3BvbnNlLmlzSW5zdGFuY2UocmVzcG9uc2UpKSByZXR1cm4gcmVzdWx0O1xuICBjb25zdCB7IHN0YXR1c0NvZGUsIGJvZHkgfSA9IHJlc3BvbnNlO1xuICBpZiAoc3RhdHVzQ29kZSA8IDIwMCAmJiBzdGF0dXNDb2RlID49IDMwMCkgcmV0dXJuIHJlc3VsdDtcblxuICAvLyBUaHJvdyAyWFggcmVzcG9uc2UgdGhhdCdzIGVpdGhlciBhbiBlcnJvciBvciBoYXMgZW1wdHkgYm9keS5cbiAgY29uc3QgYm9keUJ5dGVzID0gYXdhaXQgY29sbGVjdEJvZHkoYm9keSwgY29uZmlnKTtcbiAgY29uc3QgYm9keVN0cmluZyA9IGF3YWl0IGNvbGxlY3RCb2R5U3RyaW5nKGJvZHlCeXRlcywgY29uZmlnKTtcbiAgaWYgKGJvZHlCeXRlcy5sZW5ndGggPT09IDApIHtcbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXCJTMyBhYm9ydGVkIHJlcXVlc3RcIik7XG4gICAgZXJyLm5hbWUgPSBcIkludGVybmFsRXJyb3JcIjtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbiAgaWYgKGJvZHlTdHJpbmcgJiYgYm9keVN0cmluZy5tYXRjaChcIjxFcnJvcj5cIikpIHtcbiAgICAvLyBTZXQgdGhlIGVycm9yIGNvZGUgdG8gNFhYIHNvIHRoYXQgZXJyb3IgZGVzZXJpYWxpemVyIGNhbiBwYXJzZSB0aGVtXG4gICAgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9IDQwMDtcbiAgfVxuXG4gIC8vIEJvZHkgc3RyZWFtIGlzIGNvbnN1bWVkIGFuZCBwYXVzZWQgYXQgdGhpcyBwb2ludC4gU28gcmVwbGFjZSB0aGUgcmVzcG9uc2UuYm9keSB0byB0aGUgY29sbGVjdGVkIGJ5dGVzLlxuICAvLyBTbyB0aGF0IHRoZSBkZXNlcmlhbGl6ZXIgY2FuIGNvbnN1bWUgdGhlIGJvZHkgYXMgbm9ybWFsLlxuICByZXNwb25zZS5ib2R5ID0gYm9keUJ5dGVzO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gQ29sbGVjdCBsb3ctbGV2ZWwgcmVzcG9uc2UgYm9keSBzdHJlYW0gdG8gVWludDhBcnJheS5cbmNvbnN0IGNvbGxlY3RCb2R5ID0gKHN0cmVhbUJvZHk6IGFueSA9IG5ldyBVaW50OEFycmF5KCksIGNvbnRleHQ6IFByZXZpb3VzbHlSZXNvbHZlZCk6IFByb21pc2U8VWludDhBcnJheT4gPT4ge1xuICBpZiAoc3RyZWFtQm9keSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN0cmVhbUJvZHkpO1xuICB9XG4gIHJldHVybiBjb250ZXh0LnN0cmVhbUNvbGxlY3RvcihzdHJlYW1Cb2R5KSB8fCBQcm9taXNlLnJlc29sdmUobmV3IFVpbnQ4QXJyYXkoKSk7XG59O1xuXG4vLyBFbmNvZGUgVWludDhBcnJheSBkYXRhIGludG8gc3RyaW5nIHdpdGggdXRmLTguXG5jb25zdCBjb2xsZWN0Qm9keVN0cmluZyA9IChzdHJlYW1Cb2R5OiBhbnksIGNvbnRleHQ6IFByZXZpb3VzbHlSZXNvbHZlZCk6IFByb21pc2U8c3RyaW5nPiA9PlxuICBjb2xsZWN0Qm9keShzdHJlYW1Cb2R5LCBjb250ZXh0KS50aGVuKChib2R5KSA9PiBjb250ZXh0LnV0ZjhFbmNvZGVyKGJvZHkpKTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHRocm93MjAwRXhjZXB0aW9uc01pZGRsZXdhcmVPcHRpb25zOiBSZWxhdGl2ZU1pZGRsZXdhcmVPcHRpb25zID0ge1xuICByZWxhdGlvbjogXCJhZnRlclwiLFxuICB0b01pZGRsZXdhcmU6IFwiZGVzZXJpYWxpemVyTWlkZGxld2FyZVwiLFxuICB0YWdzOiBbXCJUSFJPV18yMDBfRVhDRVBUSU9OU1wiLCBcIlMzXCJdLFxuICBuYW1lOiBcInRocm93MjAwRXhjZXB0aW9uc01pZGRsZXdhcmVcIixcbn07XG5cbi8qKlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgZ2V0VGhyb3cyMDBFeGNlcHRpb25zUGx1Z2luID0gKGNvbmZpZzogUHJldmlvdXNseVJlc29sdmVkKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZFJlbGF0aXZlVG8odGhyb3cyMDBFeGNlcHRpb25zTWlkZGxld2FyZShjb25maWcpLCB0aHJvdzIwMEV4Y2VwdGlvbnNNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH0sXG59KTtcbiJdfQ==